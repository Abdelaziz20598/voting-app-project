#node affinity and pod anti affinity

#1 what happend if i dont use pod anti affinity if 2 nodes with the same label
if you have many Pods and they all match the same Node Affinity (or no affinity constraints at all), they will not all go to just one node. Instead, Kubernetes will attempt to distribute the Pods across available nodes, depending on several factors, 

so why i use pod anti affinity if they are by default would be distributed accros the nodes?
    - You're right to ask why you might use Pod Anti-Affinity when Pods are already distributed across nodes by default. Here’s a more detailed explanation:
    - By default, Kubernetes does try to spread Pods across nodes in a balanced way, based on the available resources (like CPU, memory), avoiding overloading any single node. However, this default behavior doesn’t always guarantee that Pods are placed exactly how you want, especially when you have specific needs for how your Pods are distributed in your cluster.
    - Pod Anti-Affinity provides more control over how Pods are scheduled relative to other Pods. While Kubernetes naturally distributes Pods across nodes, Pod Anti-Affinity gives you the ability to explicitly avoid scheduling Pods on the same node under certain conditions.
/*
affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
          - key: app
            operator: In
            values:
            - my-app
        topologyKey: "kubernetes.io/hostname"
In this case, Kubernetes ensures that no two Pods with the app=my-app label are scheduled on the same node.
*/

#2 using node affinity and pod anti affinity 2 nodes with the same label
apiVersion: apps/v1
kind: Deployment
metadata:
  name: voting-app-deployment
  namespace: prod  # Namespace for the pod
  labels:
    name: voting-app-deployment
    app: demo-voting-app
spec:
  replicas: 2
  selector:
    matchLabels:
      name: voting-app-pod
      app: demo-voting-app
  template:
    metadata:
      labels:
        name: voting-app-pod
        app: demo-voting-app
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: job
                operator: In
                values:
                - app
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: name
                operator: In
                values:
                - voting-app-pod # Avoid scheduling the same app on the same node
            topologyKey: "kubernetes.io/hostname"  # Spread pods across nodes

      containers:  # Containers in the pod
        - name: voting-app  # Name of the container
          image: kodekloud/examplevotingapp_vote:v1  # Image of the container
          ports:  # Ports of the container
          - containerPort: 80  # Port of the container
          #Must specify resources as i use resourcequota
          resources:  # Resource limits and requests for the container
            requests:  # Resource requests for the container
              cpu: 100m
              memory: 200Mi
            limits:  # Resource limits for the container
              cpu: 250m
              memory: 400Mi
          readinessProbe:  # Readiness probe for the container
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 15
            periodSeconds: 20



#3 node affitinty with the 2 diff nodes label

apiVersion: apps/v1
kind: Deployment
metadata:
  name: voting-app-deployment
  namespace: prod  # Namespace for the pod
  labels:
    name: voting-app-deployment
    app: demo-voting-app
spec:
  replicas: 2
  selector:
    matchLabels:
      name: voting-app-pod
      app: demo-voting-app
  template:
    metadata:
      labels:
        name: voting-app-pod
        app: demo-voting-app
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: job
                operator: In
                values:
                - app
                - db  
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: name
                operator: In
                values:
                - voting-app-pod # Avoid scheduling the same app on the same node
            topologyKey: "kubernetes.io/hostname"  # Spread pods across nodes
      containers:  # Containers in the pod
        - name: voting-app  # Name of the container
          image: kodekloud/examplevotingapp_vote:v1  # Image of the container
          ports:  # Ports of the container
          - containerPort: 80  # Port of the container
          #Must specify resources as i use resourcequota
          resources:  # Resource limits and requests for the container
            requests:  # Resource requests for the container
              cpu: 100m
              memory: 200Mi
            limits:  # Resource limits for the container
              cpu: 250m
              memory: 400Mi
          readinessProbe:  # Readiness probe for the container
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 15
            periodSeconds: 20